{"version":3,"sources":["services/link-service.js","components/LinkContainer/LinkContainer.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["uuid","replace","c","r","Math","random","toString","uuidShort","split","pop","today","d","Date","getFullYear","getMonth","getDate","generateLink","PREFIX_TITLE","resource","randomStr","dateStr","titleSuffix","title","collection","description","subject","creator","guid","getAttributes","url","LinkService","generateLinks","count","Array","fill","map","LinkContainer","props","useState","setCreator","setCount","className","x","style","href","target","rel","for","class","type","onChange","e","txt","value","trim","defaultValue","test","parseInt","err","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAAMA,EAAO,WACV,MAAO,uCAAuCC,QAAQ,SAAS,SAAUC,GAEtE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OAD0C,MAANH,EAAYC,EAAS,EAAJA,EAAU,GACtDG,SAAS,QAIlBC,EAAY,kBAAMP,IAAOQ,MAAM,KAAKC,OAEpCC,EAAQ,WACX,IAAIC,EAAI,IAAIC,KACZ,MAAM,GAAN,OAAUD,EAAEE,cAAZ,YAA6BF,EAAEG,WAAa,EAA5C,YAAiDH,EAAEI,YAwBhDC,EAAe,SAACC,GACnB,IAAIC,EAtBe,WAA6B,IAA5BD,EAA2B,uDAAZ,QAC7BE,EAAYnB,IACZoB,EAAUV,IACVW,EAAcd,IACde,EAAK,UAAMF,EAAN,YAAiBH,EAAjB,YAAiCI,GAGtCE,EAAa,oBAInB,MAAO,CACJD,QACAE,YARiBL,EASjBM,QARaN,EASbI,aACAG,QAPaT,EAQbU,KATUR,GAcES,CAAcX,GACzBY,EAAG,8BAMP,MAAO,CACJA,IAFHA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAM,UAAYX,EAASI,OACrB,gBAAkBJ,EAASM,aAC3B,YAAcN,EAASO,SACvB,YAAcP,EAASQ,SACvB,eAAiBR,EAASK,WAGnCI,KAAMT,EAASS,KACfL,MAAOJ,EAASI,QAiBPQ,EALK,CACjBd,eACAe,cAVmB,SAACC,EAAOf,GAC3B,OAAOgB,MAAMD,GACTE,KAAK,GACLC,KAAI,kBAAMnB,EAAaC,Q,MClDf,SAASmB,EAAcC,GAAQ,IAAD,EAEXC,mBAAS,SAFE,mBAElCZ,EAFkC,KAEzBa,EAFyB,OAGfD,mBAAS,GAHM,mBAGlCN,EAHkC,KAG3BQ,EAH2B,KAgCzC,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,oBAEPX,EAAYC,cAAcC,EAAON,GAASS,KAAI,SAAAO,GAAC,OAAI,yBAAKC,MAAO,CAAE,QAAW,QAAS,uBAAGC,KAAMF,EAAEb,IAAKgB,OAAO,SAASC,IAAI,uBAAuBJ,EAAEpB,YAG1J,yBAAKmB,UAAU,gBACX,6BACI,yCAEJ,6BACI,yBAAKA,UAAU,0BACX,2BAAOM,IAAI,WAAX,WACA,yBAAKC,MAAM,YACP,2BAAOC,KAAK,OAAOC,SArCnB,SAACC,GACrB,IAAIC,EAAMD,EAAEN,OAAOQ,MACnBD,EAAMA,EAAIE,OACVf,EAAWa,IAkCuDG,aAAa,QAAQP,MAAM,mBAGjF,yBAAKP,UAAU,0BACX,2BAAOM,IAAI,WAAX,SACA,yBAAKC,MAAM,YACP,2BAAOC,KAAK,OAAOC,SArCrB,SAACC,GACnB,IAAInB,EAASmB,EAAEN,OAAOQ,MACtB,GAAKrB,GAZS,QACCwB,KAWSxB,GAGjB,CACH,IACIA,EAAQyB,SAASzB,GACnB,MAAO0B,GACL1B,EAAQ,EAEZQ,EAASR,QAPTQ,EADAR,EAAQ,IAkCoDuB,aAAc,EAAGP,MAAM,sBCtDhF,SAASW,EAAKtB,GAGzB,OACI,yBAAKI,UAAU,QACZ,6CAIC,kBAAC,EAAD,OCAGmB,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAACkB,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b2371e4.chunk.js","sourcesContent":["const uuid = () => {\r\n   return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n      // eslint-disable-next-line\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n   });\r\n};\r\n\r\nconst uuidShort = () => uuid().split(\"-\").pop();\r\n\r\nconst today = () => {\r\n   let d = new Date();\r\n   return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\r\n};\r\n\r\nconst getAttributes = (PREFIX_TITLE = \"tmp0x\") => {\r\n   const randomStr = uuid();\r\n   const dateStr = today();\r\n   const titleSuffix = uuidShort();\r\n   const title = `${dateStr}-${PREFIX_TITLE}-${titleSuffix}`;\r\n   const description = randomStr;\r\n   const subject = randomStr;\r\n   const collection = \"opensource_movies\";\r\n   const guid = randomStr;\r\n   const creator = PREFIX_TITLE;\r\n\r\n   return {\r\n      title,\r\n      description,\r\n      subject,\r\n      collection,\r\n      creator,\r\n      guid,\r\n   };\r\n};\r\n\r\nconst generateLink = (PREFIX_TITLE) => {\r\n   let resource = getAttributes(PREFIX_TITLE);\r\n   let url = `https://archive.org/upload/`;\r\n   url = url + \"?title=\" + resource.title;\r\n   url = url + \"&description=\" + resource.description;\r\n   url = url + \"&subject=\" + resource.subject;\r\n   url = url + \"&creator=\" + resource.creator;\r\n   url = url + \"&collection=\" + resource.collection;\r\n   return {\r\n      url: url,\r\n      guid: resource.guid,\r\n      title: resource.title,\r\n   };\r\n};\r\n\r\nconst generateLinks = (count, PREFIX_TITLE) => {\r\n   return Array(count)\r\n      .fill(0)\r\n      .map(() => generateLink(PREFIX_TITLE));\r\n};\r\n\r\n\r\n\r\nconst LinkService = {\r\n   generateLink,\r\n   generateLinks\r\n}\r\n\r\nexport default LinkService;","import React, { useState } from 'react';\r\nimport LinkService from '../../services/link-service';\r\nimport './LinkContainer.css';\r\n\r\nexport default function LinkContainer(props) {\r\n\r\n    const [creator, setCreator] = useState(\"tmp0x\");\r\n    const [count, setCount] = useState(4);\r\n\r\n    const isNumber = (str) => {\r\n        var pattern = /^\\d+$/;\r\n        return pattern.test(str);\r\n    }\r\n\r\n    const onCreatorChange = (e) => {\r\n        let txt = e.target.value;\r\n        txt = txt.trim();\r\n        setCreator(txt);\r\n    }\r\n\r\n    const onCountChange = (e) => {\r\n        let count = (e.target.value);\r\n        if (!count || !isNumber(count)) {\r\n            count = 0;\r\n            setCount(count);\r\n        } else {\r\n            try {\r\n                count = parseInt(count);\r\n            } catch (err) {\r\n                count = 4;\r\n            }\r\n            setCount(count);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"LinkContainerBox\">\r\n                {\r\n                    LinkService.generateLinks(count, creator).map(x => <div style={{ \"padding\": \"5px\" }}><a href={x.url} target=\"_blank\" rel=\"noopener noreferrer\">{x.title}</a></div>)\r\n                }\r\n            </div>\r\n            <div className=\"EditSettings\">\r\n                <div>\r\n                    <h3>SETTINGS</h3>\r\n                </div>\r\n                <div>\r\n                    <div className=\"setting form-group row\">\r\n                        <label for=\"creator\">Creator</label>\r\n                        <div class=\"col-sm-2\">\r\n                            <input type=\"text\" onChange={onCreatorChange} defaultValue=\"tmp0x\" class=\"form-control\"></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"setting form-group row\">\r\n                        <label for=\"creator\">Count</label>\r\n                        <div class=\"col-sm-2\">\r\n                            <input type=\"text\" onChange={onCountChange} defaultValue={4} class=\"form-control\"></input>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport LinkContainer from '../LinkContainer/LinkContainer';\r\n\r\nexport default function Home(props){\r\n\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n           <div>\r\n               Archive Link\r\n           </div>\r\n\r\n            <LinkContainer />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Home from './components/Home/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}