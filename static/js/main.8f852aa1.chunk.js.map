{"version":3,"sources":["services/link-service.js","components/LinkContainer/LinkContainer.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["uuid","replace","c","r","Math","random","toString","uuidShort","split","pop","today","d","Date","getFullYear","getMonth","getDate","generateLink","PREFIX_TITLE","resource","randomStr","dateStr","titleSuffix","title","collection","description","subject","creator","guid","getAttributes","url","LinkService","generateLinks","count","Array","fill","map","LinkContainer","props","useState","setCreator","setCount","className","x","style","href","target","rel","for","class","type","onChange","e","txt","value","trim","defaultValue","test","parseInt","err","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAAMA,EAAO,WACV,MAAO,uCAAuCC,QAAQ,SAAS,SAAUC,GAEtE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OAD0C,MAANH,EAAYC,EAAS,EAAJA,EAAU,GACtDG,SAAS,QAIlBC,EAAY,kBAAMP,IAAOQ,MAAM,KAAKC,OAEpCC,EAAQ,WACX,IAAIC,EAAI,IAAIC,KACZ,MAAM,GAAN,OAAUD,EAAEE,cAAZ,YAA6BF,EAAEG,WAAa,EAA5C,YAAiDH,EAAEI,YAwBhDC,EAAe,SAACC,GACnB,IAAIC,EAtBe,WAA6B,IAA5BD,EAA2B,uDAAZ,QAC7BE,EAAYnB,IACZoB,EAAUV,IACVW,EAAcd,IACde,EAAK,UAAMF,EAAN,YAAiBH,EAAjB,YAAiCI,GAGtCE,EAAa,oBAInB,MAAO,CACJD,QACAE,YARiBL,EASjBM,QARaN,EASbI,aACAG,QAPaT,EAQbU,KATUR,GAcES,CAAcX,GACzBY,EAAG,8BAMP,MAAO,CACJA,IAFHA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAM,UAAYX,EAASI,OACrB,gBAAkBJ,EAASM,aAC3B,YAAcN,EAASO,SACvB,YAAcP,EAASQ,SACvB,eAAiBR,EAASK,WAGnCI,KAAMT,EAASS,KACfL,MAAOJ,EAASI,QAiBPQ,EALK,CACjBd,eACAe,cAVmB,SAACC,EAAOf,GAC3B,OAAOgB,MAAMD,GACTE,KAAK,GACLC,KAAI,kBAAMnB,EAAaC,Q,MClDf,SAASmB,EAAcC,GAAQ,IAAD,EAEXC,mBAAS,SAFE,mBAElCZ,EAFkC,KAEzBa,EAFyB,OAGfD,mBAAS,GAHM,mBAGlCN,EAHkC,KAG3BQ,EAH2B,KAgCzC,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,oBAEPX,EAAYC,cAAcC,EAAON,GAASS,KAAI,SAAAO,GAAC,OAAI,yBAAKC,MAAO,CAAE,QAAW,QAAS,uBAAGC,KAAMF,EAAEb,IAAKgB,OAAO,SAASC,IAAI,uBAAuBJ,EAAEpB,YAG1J,yBAAKmB,UAAU,gBACX,6BACI,yCAEJ,6BACI,yBAAKA,UAAU,0BACX,2BAAOM,IAAI,WAAX,WACA,yBAAKC,MAAM,YACP,2BAAOC,KAAK,OAAOC,SArCnB,SAACC,GACrB,IAAIC,EAAMD,EAAEN,OAAOQ,MACnBD,EAAMA,EAAIE,OACVf,EAAWa,IAkCuDG,aAAa,QAAQP,MAAM,mBAGjF,yBAAKP,UAAU,0BACX,2BAAOM,IAAI,WAAX,SACA,yBAAKC,MAAM,YACP,2BAAOC,KAAK,OAAOC,SArCrB,SAACC,GACnB,IAAInB,EAASmB,EAAEN,OAAOQ,MACtB,GAAKrB,GAZS,QACCwB,KAWSxB,GAGjB,CACH,IACIA,EAAQyB,SAASzB,GACnB,MAAO0B,GACL1B,EAAQ,EAEZQ,EAASR,QAPTQ,EADAR,EAAQ,IAkCoDuB,aAAc,EAAGP,MAAM,sBCtDhF,SAASW,EAAKtB,GAGzB,OACI,yBAAKI,UAAU,QACZ,6CAIC,kBAAC,EAAD,OCAGmB,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAACkB,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f852aa1.chunk.js","sourcesContent":["const uuid = () => {\n   return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      // eslint-disable-next-line\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n   });\n};\n\nconst uuidShort = () => uuid().split(\"-\").pop();\n\nconst today = () => {\n   let d = new Date();\n   return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\n};\n\nconst getAttributes = (PREFIX_TITLE = \"tmp0x\") => {\n   const randomStr = uuid();\n   const dateStr = today();\n   const titleSuffix = uuidShort();\n   const title = `${dateStr}-${PREFIX_TITLE}-${titleSuffix}`;\n   const description = randomStr;\n   const subject = randomStr;\n   const collection = \"opensource_movies\";\n   const guid = randomStr;\n   const creator = PREFIX_TITLE;\n\n   return {\n      title,\n      description,\n      subject,\n      collection,\n      creator,\n      guid,\n   };\n};\n\nconst generateLink = (PREFIX_TITLE) => {\n   let resource = getAttributes(PREFIX_TITLE);\n   let url = `https://archive.org/upload/`;\n   url = url + \"?title=\" + resource.title;\n   url = url + \"&description=\" + resource.description;\n   url = url + \"&subject=\" + resource.subject;\n   url = url + \"&creator=\" + resource.creator;\n   url = url + \"&collection=\" + resource.collection;\n   return {\n      url: url,\n      guid: resource.guid,\n      title: resource.title,\n   };\n};\n\nconst generateLinks = (count, PREFIX_TITLE) => {\n   return Array(count)\n      .fill(0)\n      .map(() => generateLink(PREFIX_TITLE));\n};\n\n\n\nconst LinkService = {\n   generateLink,\n   generateLinks\n}\n\nexport default LinkService;","import React, { useState } from 'react';\nimport LinkService from '../../services/link-service';\nimport './LinkContainer.css';\n\nexport default function LinkContainer(props) {\n\n    const [creator, setCreator] = useState(\"tmp0x\");\n    const [count, setCount] = useState(4);\n\n    const isNumber = (str) => {\n        var pattern = /^\\d+$/;\n        return pattern.test(str);\n    }\n\n    const onCreatorChange = (e) => {\n        let txt = e.target.value;\n        txt = txt.trim();\n        setCreator(txt);\n    }\n\n    const onCountChange = (e) => {\n        let count = (e.target.value);\n        if (!count || !isNumber(count)) {\n            count = 0;\n            setCount(count);\n        } else {\n            try {\n                count = parseInt(count);\n            } catch (err) {\n                count = 4;\n            }\n            setCount(count);\n        }\n\n    }\n\n    return (\n        <div className='container'>\n            <div className=\"LinkContainerBox\">\n                {\n                    LinkService.generateLinks(count, creator).map(x => <div style={{ \"padding\": \"5px\" }}><a href={x.url} target=\"_blank\" rel=\"noopener noreferrer\">{x.title}</a></div>)\n                }\n            </div>\n            <div className=\"EditSettings\">\n                <div>\n                    <h3>SETTINGS</h3>\n                </div>\n                <div>\n                    <div className=\"setting form-group row\">\n                        <label for=\"creator\">Creator</label>\n                        <div class=\"col-sm-2\">\n                            <input type=\"text\" onChange={onCreatorChange} defaultValue=\"tmp0x\" class=\"form-control\"></input>\n                        </div>\n                    </div>\n                    <div className=\"setting form-group row\">\n                        <label for=\"creator\">Count</label>\n                        <div class=\"col-sm-2\">\n                            <input type=\"text\" onChange={onCountChange} defaultValue={4} class=\"form-control\"></input>\n                        </div>\n\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport LinkContainer from '../LinkContainer/LinkContainer';\n\nexport default function Home(props){\n\n\n    return (\n        <div className=\"Home\">\n           <div>\n               Archive Link\n           </div>\n\n            <LinkContainer />\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}